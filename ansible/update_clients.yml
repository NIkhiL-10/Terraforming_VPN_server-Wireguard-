- hosts: all
  gather_facts: yes
  become: yes

  handlers:
    - name: start wg0
      systemd:
        name: "wg-quick@wg0"
        state: started
        enabled: yes
        daemon_reload: yes

    - name: restart wg0
      systemd:
        name: "wg-quick@wg0"
        state: restarted
        daemon_reload: yes

  tasks:
    - name: Create wireguard config dir
      file:
        path: "/etc/wireguard"
        state: directory
      register: wg_conf_dir

    - name: Generate wireguard server keypair
      shell: |
        if [ ! -f {{ wg_conf_dir.path }}/privatekey ]
         then
          umask 077 && wg genkey | tee {{ wg_conf_dir.path }}/privatekey | wg pubkey > {{ wg_conf_dir.path }}/publickey
        fi
        exit 0

    - name: Get wireguard private key
      slurp:
        src: "{{ wg_conf_dir.path }}/privatekey"
      register: wg_privatekey

    - name: Get wireguard public key
      slurp:
        src: "{{ wg_conf_dir.path }}/publickey"
      register: wg_publickey

    - name: Get wireguard server public IPv4
      uri:
        url: "https://ipinfo.io/ip"
        remote_src: yes
        return_content: yes
      register: wg_public_ipv4

    - name: Create Wireguard user config directory
      file:
        path: "{{ wg_conf_dir.path }}/{{ item.value.username }}"
        state: directory
      with_dict: "{{ wg_user_list }}"
      when: (item.value.remove == False)

    - name: remove Wireguard user config directory
      file:
        path: "{{ wg_conf_dir.path }}/{{ item.value.username }}"
        state: absent
      with_dict: "{{ wg_user_list }}"
      when: (item.value.remove == True)

    - name: Generate Wireguard users key
      shell: |
        if [ ! -f {{ wg_conf_dir.path }}/{{ item.value.username }}/privatekey ]
          then
            cd {{ wg_conf_dir.path }}/{{ item.value.username }}
            wg genkey | tee privatekey | wg pubkey > publickey
        fi
        exit 0
      when: (item.value.remove == False)
      with_dict: "{{ wg_user_list }}"

    - name: Read user public key
      slurp:
        src: "{{ wg_conf_dir.path }}/{{ item.value.username }}/publickey"
      with_dict: "{{ wg_user_list }}"
      register: wg_user_publickey
      when: (item.value.remove == False)

    - name: Read user private key
      slurp:
        src: "{{ wg_conf_dir.path }}/{{ item.value.username }}/privatekey"
      with_dict: "{{ wg_user_list }}"
      register: wg_user_privatekey
      when: (item.value.remove == False)

    - name: Generate Wireguard server config
      template:
        src: "templates/wg0-server.j2"
        dest: "{{ wg_conf_dir.path }}/wg0.conf"
        mode: 0640
        backup: yes
      loop: "{{ wg_user_publickey.results }}"
      when: (item.item.value.remove == False)
      notify: restart wg0

    - name: Start Wireguard server
      systemd:
        name: "wg-quick@wg0"
        state: started
        enabled: yes

    - setup:
        gather_subset: "network"

    - name: Generate Wireguard user config
      template:
        src: "templates/wg0-user.j2"
        dest: "{{ wg_conf_dir.path }}/{{ item.item.value.username }}/wg0.conf"
      loop: "{{ wg_user_privatekey.results }}"
      when: (item.item.value.remove == False)
      register: wg_user_profile  
      notify: restart wg0

    - name: Fetch Wireguard user configs
      fetch:
        src: "{{ wg_conf_dir.path }}/{{ item.item.item.value.username }}/wg0.conf"
        dest: "{{ wg_download_path }}"
      loop: "{{ wg_user_profile.results }}"
      when: (item.item.item.value.remove == False)